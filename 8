package acm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Rect{
	int number;
	int length;
	int width;
	public Rect() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Rect(int number, int length, int width) {
		this.number = number;
		this.length = length;
		this.width = width;
	}
	
}

class MyComparator implements Comparator<Rect> {
	@Override
	public int compare(Rect o1, Rect o2) {
		if(o1.number != o2.number){
			return o1.number - o2.number;
		}else if(o1.length != o2.length){
			return o1.length - o2.length;
		}else{
			//说明id和length也相同
			return o1.width - o2.width;
		}
	}
}

public class Topic_8 {

	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
		// 循环的次数
		int n = in.nextInt();
		// 接收矩形的个数
		int count = in.nextInt();
		Rect rect = null;
		List<Rect> rectList = new ArrayList<Rect>();
		String[] rects = new String[5];
		while (n != 0) {
			// 输入矩形, 如1 2 3
			for (int i = 0; i < count; i++) {
				String rectStr = in.next();
				rects = rectStr.split(",");
				rect = new Rect(Integer.parseInt(rects[0]), Integer.parseInt(rects[1]), Integer.parseInt(rects[2]));
				// 将输入的几组数据全部保存在rectList列表中
				rectList.add(rect);
			}
			// 排序
			Collections.sort(rectList, new MyComparator());
			
			for (int i = 0; i < rectList.size(); i++) {
				for( int k = 0; k < rectList.size(); k++ ) {
					if ( i != k ) {
						if ((rectList.get(i).number == rectList.get(k).number
							&& 	rectList.get(i).length == rectList.get(k).length
							&&  rectList.get(i).width == rectList.get(k).width)
							||  (rectList.get(i).number == rectList.get(k).number 
							&&  rectList.get(i).length == rectList.get(k).width
							&&  rectList.get(i).width == rectList.get(k).length)) {
							rectList.remove(i);
						}
					}
				}
			}
			for(Rect r : rectList){
				System.out.println(r.number+" "+r.length+" "+r.width);
			}
			n--;
		}
	}
}


/*
 * 
 * 
 * 1
8
1,1,1
1,1,1
1,2,1
1,1,2
1,2,2
2,1,1
2,1,2
2,2,1
 * */
